%% name = Vish
%% {
  attr_accessor :result
}

eps = ''
space = " "
- = space*
nl = "\n"
ws = space | nl
not_nl = /[^\n]/
redirect_op = < /<|>(>|&2)?|>&2|2>&1|2>/ > { text }
valid_id = /[_A-Za-z][_A-Za-z0-9\.]*/
identifier = <valid_id  > { text.to_sym }
string = '\'' < /[^']*/ > '\'' { QuotedString.new(text) }
          | '"' < /[^"]*/ > '"' {StringLiteral.new(text) }

variable =  ':' < valid_id > { Deref.new(text.to_sym) }
function_name = < valid_id > { text }

bare_string =  < /[\/\.\-_0-9A-Za-z][\/\.\-\{\}:_0-9A-Za-z]*/ > { StringLiteral.new(text) }
glob = < /[\/\.\-\*_0-9A-Za-z][\/\.\-\*\{\}:_0-9A-Za-z]*/ > { Glob.new(StringLiteral.new(text)) }
 argument = glob:g { g }
          | '&(' - function_args:a - ')' - '{' - block:b - '}' { LambdaDeclaration.new(a, b) }
          | string:s { Argument.new(s) }
          | bare_string:s { Argument.new(s) }
          | variable:v { Argument.new(v) }
          | ':(' - block:b - ')' { SubShellExpansion.new(b) }
          | '{' ws* block:b ws* '}' { LazyArgument.new(b) }

function_args = function_args:a1 - ',' - function_args:a2 { a1 + a2 }
          | identifier:a { [ a ] }
          | eps   { [] }

assignment = identifier:i '=' argument:a { Assignment.new(i, a) }

# comments
comment = '#' not_nl*

redirection = redirect_op:r - argument:a { Redirection.new(r, a) }
element = assignment | argument | redirection
context = context:c1 space+ context:c2 { c1 + c2 }
          | element:e { [ e ] }

statement_list = statement_list:s1 - ';' - statement_list:s2 { s1 + s2 }
          | statement_list:s1 - nl - statement_list:s2 { s1 + s2 }
          | expression

expression = expression:l - '|' - expression:r { [ Pipe.new(l[0], r[0]) ] }
          | expression:l - '&&' - expression:r { [ BooleanAnd.new(l[0], r[0]) ] }
          | expression:l - '||' - expression:r { [ BooleanOr.new(l[0], r[0]) ] }
          | '(' - block:b - ')' { [ SubShell.new(b) ] }
          | 'alias' space+ function_name:f '=' argument:a {[ AliasDeclaration.new(f, a) ] } 
          | 'function' - function_name:i '(' - function_args:a - ')' - '{' ws* block:b ws* '}' { [ FunctionDeclaration.new(i, a, b) ] }
          | context:c { [ Statement.new(c) ] }

block = statement_list:s { Block.new(s) }

# main entry to root of grammar
root = block:x { @result = x }
