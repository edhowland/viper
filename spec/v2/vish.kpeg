%% name = Vish
%% {
  attr_accessor :result
}

space = " "
- = space*
redirect_op = '<' | '>' | '>>' | '>&2' | '2>&1'
valid_id = /[_A-Za-z][_A-Za-z0-9]*/
identifier = <valid_id  > { text.to_sym }
 argument = < /[\/\.\-\*_0-9A-Za-z][\/\.\-\*\{\}:_0-9A-Za-z]*/ > { Argument.new(StringLiteral.new(text)) }
argument_list = argument_list:a1 argument_list:a2 { a1 + a2 }
          | space+ argument:a { [ a ] }

assignment = identifier:i '=' argument:a { Assignment.new(i, a) }
assignment_list = assignment_list:a1 space+ assignment_list:a2 { a1 + a2 }
          | assignment:a { [ a ] }
# command
simple_command = identifier:i { i }

command = simple_command:c argument_list:a { Command.new(command_name:c, arguments:ArgumentList.new(a)) }
          | simple_command:c { Command.new(command_name:c)  }

# statement
statement = assignment_list:a space+ command:c { Statement.new(assignments:AssignmentList.new(a), command:c) }
          | assignment_list:a { Statement.new(assignments:AssignmentList.new(a)) }
          | command:c { Statement.new(command:c) }
          | redirect_expr:r { [ r ] }


redirect_expr = redirect_op - argument space+ statement { :first }
          | statement space+ redirect_op - argument { :second }

# main entry to root of grammar
root = statement:x { @result = x }