%% name = Vish

%% {
  attr_accessor :result
}

space = " "
- = space*
nl = "\n"
not_nl = /[^\n]/
valid_id = /[_A-Za-z][_A-Za-z0-9]*/
var_name = < valid_id > { text }
arg_list = arg_list:a1 - ',' - arg_list:a2 { a1 + a2 }
          | var_name:v { [ v.to_sym ] } 
paren_args = '(' - arg_list:a ')' { a }
          | '(' - ')' { [] }
function_definition = 'function' space+ identifier:i paren_args:a - '{' - statement:s - '}' { [:fn, Function.new(i, a, s)] }
alias_set = 'alias' - identifier:i - '=' - arg:a { [:_alias, i, a] }  
          | 'alias' - identifier:i { [:_expand_alias, i ] }
          | 'alias' { [:_list_alias] }
comment = - '#' not_nl* nl
eol = comment
          | - nl


identifier = <valid_id  > { text.to_sym }



redirector = '<' - arg:a  { [[:redirect_from, a]] }
          | '^>' - arg:a { [[:redirect_err, a]] }
          | '>' - arg:a { [[:redirect_to, a]] }
          | '>>' - arg:a { [[:append_to, a]] }

 string = '\'' < /[^']*/ > '\'' { text }
          | '"' < /[^"]*/ > '"' { text }

variable =  ':' < valid_id > { [:deref, text.to_sym] }
          | ':{' < valid_id > '}' { [:deref, text.to_sym] }
assignment = var_name:v - '=' - arg:e { [:eq, v, e] }
 arg = < /[\/\.\-\*_0-9A-Za-z][\/\.\-\*\{\}:_0-9A-Za-z]*/ > { text }
          | string
          | variable
          | ':(' - statement:s - ')' { [:_eval, Statement.new(s)] }


args = args:a1 - args:a2 { a1 + a2 }
#          | redirector
          | arg:a { [ a ] }

 command = identifier:c - args:a { [c, a] }
          | identifier:c { [ c ] }

 statement =  function_definition:f { [ f ] } 
          | alias_set:a { [ a ] }
          | eol { [] }
          | eol - statement:s { s }
          | statement:s1 - ';' - statement:s2 { s1 + s2 }
          | statement:s1 - eol - statement:s2 { s1 + s2 }
          | assignment:a { [ a ] }
          | term:t { [ t ] } 

term = term:t1 - "&&" - term:t2 { [:_and, t1, t2] }
     | term:t1 - "||" - term:t2 { [:_or, t1, t2] }
     | term:t1 - "|" - term:t2 { [:|, t1,  t2] }
          | term:t - redirector:r { t + r }
          | '(' statement ')'
     | command

root = statement:t { @result = t }
