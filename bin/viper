#!/usr/bin/env ruby
# viper - main start for viper editor
#
# Rubocop triggers on:   _exit_code = 0
# Since we are an interpreter written in an interpreter, this is ok, so we
# ignore
# rubocop:disable Lint/UnderscorePrefixedVariableName
# TODO: Should re-archetype this
# rubocop:disable Style/GlobalVars
# There are only as many options as this editor needs
# rubocop:disable Metrics/BlockLength

# TODO: REMOVEME
require 'pry'

require 'optparse'
require_relative '../lib/viper'

options = {
  no_start: false,
  no_finish: false,
  mode: 'echo -n :(buffer_name); meta vip',
  start: [],
  sources: [],
  execute: [],
  finish: [],
  debug: false,
  check: false,
  only: [],
  boot: false,
  run: false,
  viper: false
}

oparse = OptionParser.new do |opt|
  opt.banner = 'Viper - Scriptible code editor'
  opt.separator ''
  opt.on('-n', '--no-start', 'Do not execute startup scripts') do
    options[:no_start] = true
  end
  opt.on('--no-finish', 'Do not execute scripts at exit') do
    options[:no_finish] = true
  end
  # %%LINT4
  opt.on('-m mode', '--mode mode', String,
  'Mode of editor: com: command mode, vip: (default): editor') do |mode|
    options[:mode] = mode
  end
  opt.on('-S script', '--start script', String,
   'Run script prior to load') do |script|
    options[:start] << script
  end
  opt.on('-x', '--debug', 'Debugging Support') do
    options[:debug] = true
    require_relative 'debugging_support'
  end
  opt.on('-L', '--log', 'Start logging to vish.log') do
    options[:log] = true
    options[:start] << 'logger -s; on &() { logger :_ }'
    options[:finish] << 'logger -e'
  end
  opt.on('-l line', '--line line', String,
  'Jump to line number after load buffer') do |line|
    options[:start] << "on load_event { goto :_buf #{line} | nop }"
  end
  opt.on('-s script', '--source script', 'Source script') do |script|
    options[:sources] << script
  end
  opt.on('-e script', '--execute script', String,
   'Execute this command at startup') do |script|
    options[:execute] << script
  end
  opt.on('--finish script', String,
 'Execute this set of scripts upon exit of session') do |script|
    options[:finish] << script
  end
  opt.on('-c', '--check', 'Check syntax of Vish file or stdin') do
    options[:check] = true
  end
  opt.on('-O script', '--only script', String, 'Only run these script(s), then exit') do |script|
    options[:only] << script
  end
  opt.on('-B', '--boot', 'Runs boot script. Use with -R, --run option') do
    options[:boot] = true
  end
  opt.on('-V', '--viper', 'Load Viper editor scripts. Use with -R, --run option') do
    options[:viper] = true
  end
  opt.on('-R', '--run', 'Runs loaded scripts, then exits') do
    options[:run] = true
  end
  opt.separator ''
  opt.on('-h', '--help', 'Display this help and exit') do
    puts opt
    exit
  end
  opt.on('-v', '--version', 'Display version of Vish shell and exit') do
    puts 'Vish version'
    puts Vish::VERSION
puts
puts "Release name : #{Vish::RELEASE}"
    puts
    puts Vish::DESCRIPTION
    exit
  end
end
oparse.parse!

# possibly check all input files for syntax correctness
if options[:check]
  rvalue = 0
  ARGV.each do |f|
    begin
      Visher.parse!(File.read(f))
      puts "#{f}: Syntax OK"
    rescue VishSyntaxError => err
      $stderr.puts "#{f}: #{err.message}"
      rvalue = 1
    end
  end
  exit rvalue
end

# run method, gets script from block, runs it in vm with rescued exceptions
def run vm=VirtualMachine.new, &blk
  begin
    yield(vm).map {|s| Visher.parse!(s) }.each {|b| vm.call(b) }
  rescue VishSyntaxError => err
    puts err.message
  rescue VirtualMachine::ExitCalled => err
    evalue = 0
  rescue => err
    puts err.class.name
    puts err.message
    puts err.backtrace
  end
end



def mode(opt)
  [opt[:mode]]
end



# run any loaded scripts, then exit
if options[:run]
  run do |vm|
    files = []
    files += boot(options, vm) if options[:boot]
    files += scripts(options, vm) if options[:viper]
    files += options[:sources]
    files.map {|f| File.read(f) } + options[:execute]
  end
  exit
end

# run only scripts and exit
unless options[:only].empty?
  run do |vm|
    ['mount /v; mkdir /v/bin; install;'] + options[:only]
  end
  exit
end


# return list of extension file.vsh in :vhome/ext/*/*.vsh
def extensions(vm)
  Dir[vm.fs[:vhome] + '/ext/*/*.vsh']
end

# return list of final scripts to be run at system exit
def final_scripts(vm, no_finish: false)
  if no_finish
    []
  else
    Dir[vm.fs[:vhome] + '/scripts/at_exit/*.vsh']
  end
end

# return list of 'fopen filename' s based on ARGV
# if ARGV is empty, return [ 'open unnamed1 ]
# unless some other command has set :_buf first
def file_list(argv)
  result = argv.reverse.map { |e| "fopen #{e}" }
  result << 'test -z :_buf && open unnamed1' if result.empty?
  result
end

$vm = VirtualMachine.new

at_exit do
  $exit_handlers.each { |e| $vm.call e }
end

# Main start
begin
  _exit_code = 0
  # setup exit handlers. Checks for existanance and syntax correctness
  $exit_handlers = (final_scripts($vm, no_finish: options[:no_finish])
  .map { |e| File.read(e) }).map { |e| Visher.parse! e }

  ((
    boot(options, $vm) + options[:sources]).map { |e| File.read(e) } +
    options[:start] +
    (scripts(options, $vm) + extensions($vm)).map { |e| File.read(e) } +
    options[:execute] +
    file_list(ARGV) +
    vishrc_files.map { |e| File.read(e) } +
    ['load_event'] +
    mode(options) +
    ['exit_event']
  ).map { |e| Visher.parse!(e) }.each { |e| $vm.call(e) }
rescue VirtualMachine::ExitCalled => err
  _exit_code = err.code
rescue VishSyntaxError => err
  puts 'Syntax error occured during load'
  puts err.message
rescue => err
  puts err.class.name
  puts err.message
  puts err.backtrace
ensure
  exit(_exit_code)
end
