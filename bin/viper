#!/usr/bin/env ruby
# viper - Main entry for Viper editor

require 'pry'
require_relative '../lib/viper'
require 'optparse'

options = { read_only: false, check_syntax: false, safe: false }

parser = OptionParser.new do |opt|
  opt.banner = 'Viper - Editor in Ruby for visually impaired programmers'
  opt.separator '-'
  opt.on('--safe', 'Run in safe mode. No initialization of .viperrc files') do 
    options[:safe] = true
  end
  opt.on('-c', '--check-syntax', 'Check syntax of buffer when exiting') do
    options[:check_syntax] = true
  end
  opt.on('--ro', 'Treat file as Read-only') do
    options[:read_only] = true
  end
  opt.on('-l lineno', '--line lineno', Integer, 'Gotos the lineno in the file') do |lineno|
    options[:line] = lineno
  end
  opt.separator '-'
  opt.on('-h', '--help', 'Displays this help') do
    puts opt
    exit
  end
  opt.on('-v', '--version', 'Displays the version of Viper') do
    puts 'Viper VIP Editor in Ruby'
    puts "version #{Viper::VERSION}"
    exit
  end
end

parser.parse!

# possibly open ~/.viperrc and process any commands found there
unless options[:safe]
tmp_buff = ScratchBuffer.new
suppress_audio do
    # load system-wide commands here
    load_rc(config_path + 'viperrc') do |l|
      perform!(l) { tmp_buff }
    end

    # load user's possible ~/.viperrc
  load_rc do |l|
    perform!(l) { tmp_buff }
  end

  # possibly load ./.viperrc
  load_rc './.viperrc', silent: true do |l|
    perform!(l) { tmp_buff }
  end
end
end

# set up the buffer ring
# @buffer_ring = []
if ARGV.length == 0
  $buffer_ring << FileBuffer.new('Unnamed')
elsif options[:read_only]
  $buffer_ring = ARGV.map { |f| ReadOnlyFileBuffer.new(f) }
else
  $buffer_ring = ARGV.map { |f| FileBuffer.new(f) }
end

# return the head of the @buffer_ring
def fbuffer
  $buffer_ring.first
end

@buffer = fbuffer
@search_buffer = Buffer.new ''
@search_line = Viper::Readline.new
@command_line = Viper::Readline.new
@search_direction = :srch_fwd # or :srch_back
@search_buffer.name = 'Search buffer'

def swap(buff1, buff2)
  [buff2, buff1]
end

# possibly jump to a specific line in the file

fbuffer.goto options[:line] unless options[:line].nil?

# Executes this block for each character typed in the console
#   Exits whenever some exception is raised
Viper::Control.loop do |worker|
  begin
    ch = worker.getch
    prc = worker.bound_proc_for ch
    result = prc.call(@buffer)
    if result.to_s =~ /^cmd_/
      command = convert_cmd result
      exec_cmd command, @buffer
    end
    case result
    when :quit
      break

    when :rotate_buffer
      $buffer_ring.rotate!
      @buffer = fbuffer
      say "Buffer is now #{@buffer.name}"
    when :save
      @buffer.save
      say "Buffer #{@buffer.name} saved"

    when :debug
      say 'Entering debug mode. Press Ctrl-D to exit'
      binding.pry
      say "Exited debug mode. Buffer is #{@buffer.name}"


    when :command
      say 'command '
      quitting = false
      quitting = repl(@command_line) { fbuffer }


    end
    break if quitting == :quit
    @buffer = fbuffer # restore the @buffer pointer
  rescue BufferExceeded
    say BELL
  rescue => err
    say err.message
  end
end

# possibly save dirty buffer
$buffer_ring.select(&:should_save?).map do |buf|
  if confirm?("Save #{buf.name}? ")
    buf.save
    say "#{buf.name} saved"
  end
end

# possibly check syntax of buffer
check_ruby_syntax(fbuffer) if options[:check_syntax]
